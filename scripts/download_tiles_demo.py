#!/usr/bin/env python3
"""
–î–µ–º–æ-–≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–π–ª–æ–≤ –∫–∞—Ä—Ç—ã –ö–∏–ø—Ä–∞
"""

import os
import requests
import time
import math
from pathlib import Path

# –ì—Ä–∞–Ω–∏—Ü—ã –ö–∏–ø—Ä–∞ (–±–æ–ª–µ–µ —É–∑–∫–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –¥–µ–º–æ)
MIN_LAT = 34.8
MAX_LAT = 35.4
MIN_LNG = 32.5
MAX_LNG = 34.2

# –£—Ä–æ–≤–Ω–∏ –∑—É–º–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ)
MIN_ZOOM = 8
MAX_ZOOM = 12

# URL —à–∞–±–ª–æ–Ω –¥–ª—è OpenStreetMap
TILE_URL = "https://tile.openstreetmap.org/{z}/{x}/{y}.png"

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–ª–æ–≤
TILES_DIR = Path("../assets/tiles")

# User-Agent –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
USER_AGENT = "CyFishON/1.0 (Offline Map Downloader Demo)"

def deg2num(lat_deg, lon_deg, zoom):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –Ω–æ–º–µ—Ä–∞ —Ç–∞–π–ª–æ–≤"""
    lat_rad = math.radians(lat_deg)
    n = 2.0 ** zoom
    x = int((lon_deg + 180.0) / 360.0 * n)
    y = int((1.0 - math.asinh(math.tan(lat_rad)) / math.pi) / 2.0 * n)
    return (x, y)

def download_tile(x, y, z, session):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–∞–π–ª–∞"""
    url = TILE_URL.format(x=x, y=y, z=z)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–∞–π–ª–∞
    tile_dir = TILES_DIR / str(z) / str(x)
    tile_dir.mkdir(parents=True, exist_ok=True)
    
    tile_path = tile_dir / f"{y}.png"
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if tile_path.exists():
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω —Ç–∞–π–ª {z}/{x}/{y} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
        return True
    
    try:
        response = session.get(url, timeout=10)
        response.raise_for_status()
        
        with open(tile_path, 'wb') as f:
            f.write(response.content)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–∞–π–ª {z}/{x}/{y}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–∞ {z}/{x}/{y}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    print("üó∫Ô∏è  –î–µ–º–æ-–∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–π–ª–æ–≤ –∫–∞—Ä—Ç—ã –ö–∏–ø—Ä–∞")
    print(f"üìç –û–±–ª–∞—Å—Ç—å: {MIN_LAT}¬∞-{MAX_LAT}¬∞N, {MIN_LNG}¬∞-{MAX_LNG}¬∞E")
    print(f"üîç –ó—É–º: {MIN_ZOOM}-{MAX_ZOOM}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–∞–π–ª–æ–≤
    TILES_DIR.mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    session = requests.Session()
    session.headers.update({
        'User-Agent': USER_AGENT,
        'Accept': 'image/png,image/*;q=0.8,*/*;q=0.5',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
    })
    
    total_tiles = 0
    downloaded_tiles = 0
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤
    for zoom in range(MIN_ZOOM, MAX_ZOOM + 1):
        min_x, max_y = deg2num(MIN_LAT, MIN_LNG, zoom)
        max_x, min_y = deg2num(MAX_LAT, MAX_LNG, zoom)
        
        for x in range(min_x, max_x + 1):
            for y in range(min_y, max_y + 1):
                total_tiles += 1
    
    print(f"üìä –í—Å–µ–≥–æ —Ç–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {total_tiles}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–π–ª—ã
    for zoom in range(MIN_ZOOM, MAX_ZOOM + 1):
        print(f"\nüîç –ó–∞–≥—Ä—É–∑–∫–∞ –∑—É–º–∞ {zoom}...")
        
        min_x, max_y = deg2num(MIN_LAT, MIN_LNG, zoom)
        max_x, min_y = deg2num(MAX_LAT, MAX_LNG, zoom)
        
        zoom_tiles = 0
        zoom_downloaded = 0
        
        for x in range(min_x, max_x + 1):
            for y in range(min_y, max_y + 1):
                zoom_tiles += 1
                
                if download_tile(x, y, zoom, session):
                    zoom_downloaded += 1
                    downloaded_tiles += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                time.sleep(0.2)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Ç–∞–π–ª–æ–≤
                if zoom_tiles % 10 == 0:
                    progress = (downloaded_tiles / total_tiles) * 100
                    print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% ({downloaded_tiles}/{total_tiles})")
        
        print(f"‚úÖ –ó—É–º {zoom}: {zoom_downloaded}/{zoom_tiles} —Ç–∞–π–ª–æ–≤")
    
    print(f"\nüéâ –î–µ–º–æ-–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {downloaded_tiles}/{total_tiles} —Ç–∞–π–ª–æ–≤")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    total_size = 0
    for tile_file in TILES_DIR.rglob("*.png"):
        total_size += tile_file.stat().st_size
    
    size_mb = total_size / (1024 * 1024)
    print(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {size_mb:.1f} –ú–ë")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∑–∫–µ
    info_file = TILES_DIR / "demo_info.txt"
    with open(info_file, 'w', encoding='utf-8') as f:
        f.write(f"–î–µ–º–æ —Ç–∞–π–ª—ã –∫–∞—Ä—Ç—ã –ö–∏–ø—Ä–∞\n")
        f.write(f"–û–±–ª–∞—Å—Ç—å: {MIN_LAT}¬∞-{MAX_LAT}¬∞N, {MIN_LNG}¬∞-{MAX_LNG}¬∞E\n")
        f.write(f"–ó—É–º: {MIN_ZOOM}-{MAX_ZOOM}\n")
        f.write(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∞–π–ª–æ–≤: {downloaded_tiles}\n")
        f.write(f"–†–∞–∑–º–µ—Ä: {size_mb:.1f} –ú–ë\n")
        f.write(f"–ò—Å—Ç–æ—á–Ω–∏–∫: OpenStreetMap\n")
        f.write(f"–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    print(f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {info_file}")

if __name__ == "__main__":
    main()
